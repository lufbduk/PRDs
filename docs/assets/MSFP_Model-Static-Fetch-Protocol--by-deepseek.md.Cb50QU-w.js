import{_ as t,c as i,o as a,ae as o}from"./chunks/framework.BNDcSCrg.js";const k=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"MSFP/Model-Static-Fetch-Protocol--by-deepseek.md","filePath":"MSFP/Model-Static-Fetch-Protocol--by-deepseek.md","lastUpdated":1744994232000}'),l={name:"MSFP/Model-Static-Fetch-Protocol--by-deepseek.md"};function n(e,s,r,h,p,g){return a(),i("div",null,s[0]||(s[0]=[o(`<p>我们打算提出一种新的协议：MSFP（Model Static Fetch Protocol）</p><p>背景： MCP有一个很大的缺点，就是需要部署MCP服务才能使用。对于一些简单的工具，其实完全可以实现这样一种协议：将静态的资源、函数代码、WASM等发布在静态托管平台（比如 GitHub Pages），供AI客户端fetch，这样一来，此类简单功能的提供者就不需要付出维护服务器的成本。至于安全问题，AI客户端完全可以凭借AI自身的能力来进行代码安全性审查；此外也可以有静态托管平台进行内容资质认证。</p><p>相较于 MCP，MSFP 同样可以提供（轻量级的）Resources, Prompts, Tools(as code or WASM), Roots 等特性，但不提供 Sampling ，并且只支持单向的 Transports（传输层）。 （Sampling 是一个 MCP 功能，它允许 servers 通过 client 请求 LLM 补全，从而实现复杂的 agentic 行为，同时保持安全性和隐私性）</p><p>可能的口号： Fetch AI Tools, Zero Servers</p><p>请你给这个协议草拟一个纲要。</p><hr><p>以下是 <strong>MSFP（Model Static Fetch Protocol）</strong> 的协议纲要草案，围绕其核心目标（<strong>零服务器依赖、静态化工具分发、轻量级AI集成</strong>）设计：</p><hr><h3 id="msfp-协议纲要-v0-1" tabindex="-1"><strong>MSFP 协议纲要 v0.1</strong> <a class="header-anchor" href="#msfp-协议纲要-v0-1" aria-label="Permalink to &quot;**MSFP 协议纲要 v0.1**&quot;">​</a></h3><h4 id="_1-协议目标" tabindex="-1"><strong>1. 协议目标</strong> <a class="header-anchor" href="#_1-协议目标" aria-label="Permalink to &quot;**1. 协议目标**&quot;">​</a></h4><ul><li><strong>零服务器维护</strong>：通过静态托管平台（如 GitHub Pages、IPFS）分发工具资源，消除服务端运维成本。</li><li><strong>轻量级集成</strong>：为AI客户端提供标准化接口，快速获取静态化工具（Prompts、代码、WASM等）。</li><li><strong>安全与透明</strong>：依赖AI客户端的代码审查能力 + 托管平台资质认证，确保资源可信。</li></ul><h4 id="_2-核心组件" tabindex="-1"><strong>2. 核心组件</strong> <a class="header-anchor" href="#_2-核心组件" aria-label="Permalink to &quot;**2. 核心组件**&quot;">​</a></h4><ul><li><p><strong>静态资源包（Static Bundle）</strong></p><ul><li><strong>Resources</strong>：预处理的文本/数据（如知识库片段）。</li><li><strong>Prompts</strong>：结构化提示词模板（JSON/YAML格式）。</li><li><strong>Tools</strong>：可执行逻辑（支持 WASM、Python 脚本等静态代码）。</li><li><strong>Roots</strong>：依赖关系的声明文件（类似 <code>package.json</code>）。</li></ul></li><li><p><strong>协议标识文件（<code>msfp-manifest.json</code>）</strong></p><div class="language-json vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">json</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">{</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;version&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;0.1&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;resources&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: [</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;data/knowledge.json&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">],</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;prompts&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: [</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;prompts/qa.yaml&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">],</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;tools&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: {</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">&quot;wasm&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;search.wasm&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">&quot;python&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;filter.py&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">},</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">  &quot;certification&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;github_pages&quot;</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"> // 托管平台资质标识</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div></li></ul><h4 id="_3-工作流程" tabindex="-1"><strong>3. 工作流程</strong> <a class="header-anchor" href="#_3-工作流程" aria-label="Permalink to &quot;**3. 工作流程**&quot;">​</a></h4><ol><li><p><strong>发布阶段</strong></p><ul><li>开发者将工具包上传至静态托管平台，生成公开访问的URL（如 <code>https://example.com/tool-1/msfp-manifest.json</code>）。</li></ul></li><li><p><strong>发现阶段</strong></p><ul><li>AI客户端通过人工输入、社区目录或搜索引擎获取工具包的URL。</li></ul></li><li><p><strong>验证阶段</strong></p><ul><li>AI客户端检查托管平台资质（如GitHub认证标签）。</li><li><strong>可选</strong>：AI动态审查代码安全性（例如解析WASM的输入输出约束）。</li></ul></li><li><p><strong>执行阶段</strong></p><ul><li>客户端根据<code>manifest</code> Fetch资源，本地化执行工具逻辑（如加载WASM模块运行）。</li></ul></li></ol><h4 id="_4-传输层设计" tabindex="-1"><strong>4. 传输层设计</strong> <a class="header-anchor" href="#_4-传输层设计" aria-label="Permalink to &quot;**4. 传输层设计**&quot;">​</a></h4><ul><li><strong>单向Fetch</strong>：仅支持客户端从静态URL拉取资源（HTTP GET）。</li><li><strong>缓存策略</strong>：利用ETag或版本号减少重复下载。</li><li><strong>离线支持</strong>：允许客户端预下载工具包。</li></ul><h4 id="_5-安全机制" tabindex="-1"><strong>5. 安全机制</strong> <a class="header-anchor" href="#_5-安全机制" aria-label="Permalink to &quot;**5. 安全机制**&quot;">​</a></h4><ul><li><strong>资质白名单</strong>：信任特定托管平台（如GitHub Pages、Vercel）。</li><li><strong>沙箱化执行</strong>：强制WASM/脚本在隔离环境中运行。</li><li><strong>AI审查</strong>：输出风险评分（例如：“该WASM尝试访问网络接口，置信度80%”）。</li></ul><h4 id="_6-局限性" tabindex="-1"><strong>6. 局限性</strong> <a class="header-anchor" href="#_6-局限性" aria-label="Permalink to &quot;**6. 局限性**&quot;">​</a></h4><ul><li><strong>无动态交互</strong>：不支持MCP的Sampling等双向通信功能。</li><li><strong>功能范围</strong>：仅适用于无状态、确定性工具（如数据转换、模板生成）。</li><li><strong>更新延迟</strong>：静态资源需手动发布新版本。</li></ul><h4 id="_7-示例场景" tabindex="-1"><strong>7. 示例场景</strong> <a class="header-anchor" href="#_7-示例场景" aria-label="Permalink to &quot;**7. 示例场景**&quot;">​</a></h4><ul><li><strong>工具</strong>：一个静态化的“单位转换器”（WASM + 提示词）。</li><li><strong>发布者</strong>：上传至GitHub Pages，成本为$0。</li><li><strong>用户</strong>：AI Fetch URL后直接本地调用，无需服务器交互。</li></ul><h4 id="_8-可能扩展" tabindex="-1"><strong>8. 可能扩展</strong> <a class="header-anchor" href="#_8-可能扩展" aria-label="Permalink to &quot;**8. 可能扩展**&quot;">​</a></h4><ul><li><strong>社区目录</strong>：维护MSFP工具的公开索引（类似NPM registry）。</li><li><strong>版本协商</strong>：客户端声明兼容的MSFP版本。</li></ul><hr><h3 id="口号建议" tabindex="-1"><strong>口号建议</strong> <a class="header-anchor" href="#口号建议" aria-label="Permalink to &quot;**口号建议**&quot;">​</a></h3><ul><li><strong>主口号</strong>： <em>&quot;Fetch AI Tools, Zero Servers&quot;</em></li><li><strong>备选</strong>： <em>&quot;Static Tools, Dynamic AI&quot;</em> 或 <em>&quot;AI Plugins, Host Anywhere&quot;</em></li></ul><hr><h3 id="后续步骤" tabindex="-1"><strong>后续步骤</strong> <a class="header-anchor" href="#后续步骤" aria-label="Permalink to &quot;**后续步骤**&quot;">​</a></h3><ol><li>定义详细的<code>manifest</code>字段和资源格式规范。</li><li>开发参考实现（如VS Code插件生成MSFP工具包）。</li><li>与静态托管平台合作推动资质认证标准。</li></ol><p>此协议适合工具开发者追求极简部署，而复杂场景仍需MCP等动态协议补充。</p>`,32)]))}const u=t(l,[["render",n]]);export{k as __pageData,u as default};
