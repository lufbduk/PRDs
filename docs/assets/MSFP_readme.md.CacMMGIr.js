import{_ as e,c as s,o as l,ae as t}from"./chunks/framework.BNDcSCrg.js";const u=JSON.parse('{"title":"MSFP - 模型静态取件协议","description":"","frontmatter":{},"headers":[],"relativePath":"MSFP/readme.md","filePath":"MSFP/readme.md","lastUpdated":1744994232000}'),i={name:"MSFP/readme.md"};function o(n,a,r,p,h,c){return l(),s("div",null,a[0]||(a[0]=[t(`<h1 id="msfp-模型静态取件协议" tabindex="-1">MSFP - 模型静态取件协议 <a class="header-anchor" href="#msfp-模型静态取件协议" aria-label="Permalink to &quot;MSFP - 模型静态取件协议&quot;">​</a></h1><blockquote><p><strong>注意：此文件由AI（GitHub Copilot）生成</strong></p></blockquote><p>MSFP (Model Static Fetch Protocol) 是一种以静态网络资源形式实现的 ServerFree AI 工具协议，提供了轻量级的静态版 MCP 替代方案。</p><h2 id="简介" tabindex="-1">简介 <a class="header-anchor" href="#简介" aria-label="Permalink to &quot;简介&quot;">​</a></h2><p>MSFP 协议解决了传统 MCP 协议需要部署服务器的问题，通过静态托管平台（如 GitHub Pages、IPFS）分发 AI 工具资源，实现零服务器维护的目标。对于简单的工具功能，开发者无需付出维护服务器的成本，同时依赖 AI 客户端的代码审查能力和托管平台的资质认证来确保安全性。</p><h2 id="口号" tabindex="-1">口号 <a class="header-anchor" href="#口号" aria-label="Permalink to &quot;口号&quot;">​</a></h2><p>&quot;Fetch AI Tools, Zero Servers&quot;</p><h2 id="核心特点" tabindex="-1">核心特点 <a class="header-anchor" href="#核心特点" aria-label="Permalink to &quot;核心特点&quot;">​</a></h2><ul><li><strong>无服务器架构</strong>：完全基于静态资源，无需服务器部署和维护</li><li><strong>轻量级实现</strong>：提供类似 MCP 的 Resources、Prompts、Tools 和 Roots 功能，但更轻量</li><li><strong>易于发布</strong>：可发布在任何静态托管平台上（GitHub Pages、Netlify、Vercel等）</li><li><strong>安全审查</strong>：依靠 AI 客户端自身能力进行代码安全审查</li><li><strong>低成本分发</strong>：降低 AI 工具分发的门槛和成本</li></ul><h2 id="基本架构" tabindex="-1">基本架构 <a class="header-anchor" href="#基本架构" aria-label="Permalink to &quot;基本架构&quot;">​</a></h2><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>MSFP工具包/</span></span>
<span class="line"><span>  ├── msfp-manifest.json  # 协议标识文件</span></span>
<span class="line"><span>  ├── resources/          # 静态资源文件</span></span>
<span class="line"><span>  ├── prompts/            # 提示模板</span></span>
<span class="line"><span>  ├── tools/              # 工具代码（JavaScript/WASM/Python等）</span></span>
<span class="line"><span>  └── docs/               # 文档</span></span></code></pre></div><h2 id="快速开始" tabindex="-1">快速开始 <a class="header-anchor" href="#快速开始" aria-label="Permalink to &quot;快速开始&quot;">​</a></h2><ol><li>创建你的工具包结构</li><li>编写 msfp-manifest.json 文件</li><li>将工具包部署到静态托管平台</li><li>将URL分享给支持MSFP协议的AI客户端</li></ol><h2 id="限制" tabindex="-1">限制 <a class="header-anchor" href="#限制" aria-label="Permalink to &quot;限制&quot;">​</a></h2><ul><li>不支持 MCP 的 Sampling 功能</li><li>只支持单向的传输层</li><li>不适合需要复杂交互的场景</li></ul><h2 id="贡献指南" tabindex="-1">贡献指南 <a class="header-anchor" href="#贡献指南" aria-label="Permalink to &quot;贡献指南&quot;">​</a></h2><p>我们欢迎社区贡献，包括：</p><ul><li>协议规范改进</li><li>工具包示例</li><li>客户端SDK开发</li><li>文档完善与翻译</li></ul><h2 id="许可证" tabindex="-1">许可证 <a class="header-anchor" href="#许可证" aria-label="Permalink to &quot;许可证&quot;">​</a></h2><p>待定</p>`,20)]))}const m=e(i,[["render",o]]);export{u as __pageData,m as default};
